{"version":3,"sources":["components/Editor.js","components/Previewer.js","App.js","reportWebVitals.js","index.js"],"names":["Editor","props","className","styleToggle1","styleToggle2","onClick","onclick","onChange","onchange","value","id","Previewer","dangerouslySetInnerHTML","__html","innerHtml","App","useState","inputValue","setInputValue","markedValue","setMarkedValue","active1","setActive1","active2","setActive2","useEffect","str","marked","e","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAWeA,EATA,SAACC,GACd,OACE,sBAAKC,UAAW,cAAgBD,EAAME,aAAe,UAAaF,EAAMG,aAAe,QAAU,IAAjG,UACE,yBAAQF,UAAU,SAAlB,UAA2B,sBAAMA,UAAU,OAAhB,oBAAoC,mBAAGG,QAASJ,EAAMK,QAASJ,UAAU,gCACpG,0BAAUK,SAAUN,EAAMO,SAAUC,MAAOR,EAAMQ,MAAOC,GAAG,SAASR,UAAU,eCKrES,EATG,SAACV,GACjB,OACE,sBAAKC,UAAW,iBAAmBD,EAAME,aAAe,QAAWF,EAAMG,aAAe,UAAY,IAApG,UACE,yBAAQF,UAAU,SAAlB,UAA2B,sBAAMA,UAAU,OAAhB,uBAAuC,mBAAGG,QAASJ,EAAMK,QAASJ,UAAU,gCACvG,qBAAKU,wBAAyB,CAACC,OAAQZ,EAAMa,WAAYZ,UAAU,UAAUQ,GAAG,gBCoCvEK,MApCf,WAAgB,IAAD,EAEuBC,mBAAS,IAFhC,mBAENC,EAFM,KAEMC,EAFN,OAGyBF,mBAAS,IAHlC,mBAGNG,EAHM,KAGOC,EAHP,OAIiBJ,oBAAS,GAJ1B,mBAINK,EAJM,KAIGC,EAJH,OAKiBN,oBAAS,GAL1B,mBAKNO,EALM,KAKGC,EALH,KA2Bb,OANAC,qBAAU,WACR,IAAIC,EAAM,ysBACVR,EAAcQ,GACdN,EAAeO,IAAOD,MACrB,IAGD,sBAAKxB,UAAU,YAAf,UACE,sBAAKA,UAAW,WAAamB,GAAqBE,EAAX,QAA+B,IAAtE,wDAAuH,sBAAMrB,UAAU,SAAhB,0CACvH,cAAC,EAAD,CAAQC,aAAckB,EAASjB,aAAcmB,EAASjB,QAjBhC,WACxBgB,GAAYD,IAgBwEZ,MAAOQ,EAAYT,SAvBpF,SAACoB,GACpB,IAAInB,EAAQmB,EAAEC,OAAOpB,MACrBS,EAAcT,GACdW,EAAeO,IAAOlB,OAqBpB,cAAC,EAAD,CAAWH,QAdc,WAC3BkB,GAAYD,IAagCpB,aAAckB,EAASjB,aAAcmB,EAAST,UAAWK,QCzB1FW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.560cf80a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Editor = (props) => {\r\n  return (\r\n    <div className={\"editor-div\" + (props.styleToggle1 ? \" active\" : (props.styleToggle2 ? \" hide\" : \"\"))}>\r\n      <header className=\"header\"><span className=\"span\">Editor</span><i onClick={props.onclick} className=\"fas fa-expand-arrows-alt\"></i></header>\r\n      <textarea onChange={props.onchange} value={props.value} id=\"editor\" className=\"editor\"></textarea>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Editor;\r\n","import React from \"react\";\r\n\r\nconst Previewer = (props) => {\r\n  return (\r\n    <div className={\"previewer-div\" + (props.styleToggle1 ? \" hide\" : (props.styleToggle2 ? \" active\" : \"\"))}>\r\n      <header className=\"header\"><span className=\"span\">Previewer</span><i onClick={props.onclick} className=\"fas fa-expand-arrows-alt\"></i></header>\r\n      <div dangerouslySetInnerHTML={{__html: props.innerHtml}} className=\"preview\" id=\"preview\"></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Previewer;\r\n","import './App.css';\nimport React, {useState, useEffect} from \"react\";\nimport marked from \"marked\";\nimport Editor from \"./components/Editor.js\";\nimport Previewer from \"./components/Previewer.js\";\n\nfunction App() {\n\n  const [inputValue, setInputValue] = useState(\"\");\n  const [markedValue, setMarkedValue] = useState(\"\");\n  const [active1, setActive1] = useState(false);\n  const [active2, setActive2] = useState(false);\n\n  const handleChange = (e) => {\n    let value = e.target.value;\n    setInputValue(value);\n    setMarkedValue(marked(value));\n  }\n\n  const toggleEditorClass = () => {\n    setActive1(!active1);\n  }\n\n  const togglePreviewerClass = () => {\n    setActive2(!active2);\n  }\n\n  useEffect(() => {\n    let str = \"# Welcome to my React Markdown Previewer! \\n## This is a sub-heading... \\n### And here\\'s some other cool stuff: \\nHere\\'s some code, \\`<div></div>\\`, between 2 backticks. \\n\\`\\`\\` \\nfunction anotherExample() \\{\\n return \\\"why you not usin' arrow function dude?!\\\" \\n }\\n\\`\\`\\`\\nYou can also make text **bold**... whoa! \\nOr _italic_. \\nOr... wait for it... **_both!_** \\nAnd feel free to go crazy ~~crossing stuff out~~. \\nThere\\'s also [links](_blank), and \\n> Block Quotes! \\n1. And there are numbererd lists too. \\n1. Use just 1s if you want! \\n1. And last but not least, let\\'s not forget embedded images: \\n\\n![Batman Logo](https:\\/\\/www.freepnglogos.com/uploads/black-logo-batman-png-1.png) \\nnananananana... BATMAN!!!\";\n    setInputValue(str);\n    setMarkedValue(marked(str));\n  }, [])\n\n  return (\n    <div className=\"container\">\n      <div className={\"heading\" + (active1 ? \" hide\" : (active2 ? \" hide\" : \"\"))}>Markdown Previewer with React and Marked.js<span className=\"provvy\">coded by Paolo Provveduto</span></div>\n      <Editor styleToggle1={active1} styleToggle2={active2} onclick={toggleEditorClass} value={inputValue} onchange={handleChange} />\n      <Previewer onclick={togglePreviewerClass} styleToggle1={active1} styleToggle2={active2} innerHtml={markedValue} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}